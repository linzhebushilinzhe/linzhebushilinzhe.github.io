<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[canvas基础API]]></title>
    <url>%2F2019%2F05%2F05%2Fcanvas%E5%9F%BA%E7%A1%80API%2F</url>
    <content type="text"><![CDATA[canvas基础API画布APIcanvas.getContext(&quot;2d&quot;); 得到画笔（上下文） canvas.width; 画布的宽 canvas.height; 画布的高 上下文API(画笔)样式--- ctx.fillStyle 填充颜色 --- ctx.strokeStyle 线的颜色 --- ctx.lineWidth 线的宽度 --- ctx.lineCap 线的两头样式 --- ctx.lineJoin 线的连接处样式 路径--- ctx.clearRect(0,0,canvas.width,canvas.height) 清除画布 --- ctx.fillRect(x,y,w,h) 填充矩形:x,y为矩形的左上角的坐标，w，h为宽高 --- ctx.strokeRect(x,y,w,h) 带边框矩形:x,y为矩形的左上角的坐标，w，h为宽高 --- ctx.moveTo(x,y) 将画笔抬起到x,y处 --- ctx.lineTo(x,y) 将画笔移到x,y处 --- ctx.rect(x,y,w,h) --- ctx.arc(x,y,r,start deg,end deg,dir) 画圆的路径 x,y为圆心，r为半径，start deg为开始角度，end deg为结束角度，dir为方向：顺时针和逆时针 --- ctx.arcTo(x1,y1,x2,y2,r) 画圆弧的路径：就是有这三个点组成的∠（角），用半径为r的圆切割得到的路径,**不会**经过起始点和结束点 结合ctx.moveTo(x,y)方法使用 x，y为起始点 x1，y1为控制点 x2，y2为结束点 --- ctx.quadraticCurveTo(x1,y1,x2,y2) 画圆弧的路径：就是有这三个点组成的∠（角），用半径为r的圆切割得到的路径,**会**经过起始点和结束点 结合ctx.moveTo(x,y)方法使用 x，y为起始点 x1，y1为控制点 x2，y2为结束点 --- ctx.bezierCurveTo(x1,y1,x2,y2,x3,y3) 画圆弧的路径：就是有这三个点组成的∠（角），用半径为r的圆切割得到的路径,**会**经过起始点和结束点 结合ctx.moveTo(x,y)方法使用 x，y为起始点 x1，y1为控制点1 x2，y2为控制点2 x3，y3为结束点 --- ctx.fill() 填充路径 --- ctx.stroke() 连接路径 --- ctx.beginPath() 清除路径容器 --- ctx.closePath() 闭合路径 fill自动闭合 stroke手动闭合 --- ctx.save() 将画布当前状态（样式）压入样式栈中 --- ctx.restore() 将样式栈中栈顶的元素弹到样式容器中 图像最终渲染依赖于央视容器 --- ctx.translate(x,y) 将原点安当前坐标轴位移x，y的单位 --- ctx.rotate(弧度（不是角度）) 将坐标轴按顺时针方向进行旋转 --- ctx.scale(x,y) 放大或者缩小 模板 ctx.save(); 相关样式 ctx.beginPath(); 路径，图形 ctx.restore(); 相当于一个块级作用域！！！！ PS--- canvas(画布)的width和height一定使用内联样式 --- canvas(画布)的默认宽高为300*150 --- 绘制矩形的问题 a. 边框宽度的问题，边框宽度是在偏移量上下分别渲染一半，可能出现小数边框， 一旦出现小数边框都会向上取整：0.5 --&gt; 1 b. canvas的api只支持一种图像的直接渲染：矩形。]]></content>
      <categories>
        <category>h5--canvas</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jQuery知识点]]></title>
    <url>%2F2019%2F04%2F29%2FJquery%E7%9F%A5%E8%AF%86%E7%82%B9%2F</url>
    <content type="text"><![CDATA[了解jQuerywhat？ 一个js函数库 封装简化dom操作（crud）增删改查why？ 选择器 隐式遍历：一次操作多个dom元素 读写合一：读或者写数据使用一个函数 事件处理 链式调用？ $(“div”).css().css().css() 返回jQuery对象 dom操作（cud）：？ 样式操作：css方法 动画： 浏览器兼容 jQuery函数：$(param); param为function：相当于文件加载完成监听 param为选择器字符串：查找所用匹配的dom元素，并封装成jquery对象 伪数组 param为dom元素：将dom元素封装为jquery对象 $(this); param为便签体体文本字符串：创建标签dom元素并封装为jQuery对象 jQuery对象：包含一个或者多个dom元素的伪数组对象 typeof object；？ length/size():当前dom元素的个数 [index]：得到指定下标所对应的dom元素 each(function(index,value)): 遍历 index():得到当前dom元素在兄弟中的下标 选择器 基本 元素 id 类名 p,h1,div{}；并集选择器 ph1div:交集选择器 层次 p&gt;div{} 子元素选择器 p div{} 后代选择器 过滤 :first :last :eq(index) 匹配给定下表的元素 :not(选择器) 去除所有与给定选择器匹配的元素 :odd 匹配所有索引值为奇数的元素，从 0 开始计数 :even 匹配所有索引值为偶数的元素，从 0 开始计数 :lt(index) &lt; :gt(index) &gt; :hidden 匹配所有隐藏dom元素 :visible 匹配所有可见dom元素 :[attrName] 匹配包含给定属性的元素 $(“div[id]”) :[attrName=’value’] 匹配给定的属性是某个特定值的元素 $(“input[name=’newsletter’]”). …… 标签 input :checked :text :checkbox :radio jquery对象属性方法 attr(name)/attr(name,value):读/写非布尔值的标签属性 prop(name)/prop(name,value):读/写布尔值的变迁属性 removeAttr(name)/removeProp(name):删除属性 addClass(name):添加class removeClass(name):删除class val()/val(value):读写标签的value 写：$(“input”).val(“hello world!”); html()/html(html):读写便签体文本 写： $(“p”).html(“Hello world!”); 1.css模块 style .css(“color”):读 .css(“color”,”red”):写 .css({color:”red”,background:”yellow”}) 位置 offset() 读写当前元素的坐标（原点：页面左上角） 返回jQuery对象包含left和top坐标 position() 读当前元素的坐标（原点：父元素左上角） 返回jQuery对象包含left和top坐标 scrollTop() 读写滚动条的坐标 尺寸 width()/height()：读写width和height innerWidth()/innerHeight():读写width+padding outerWidth():读写width+padding+border第二个参数为true时再加上margin 2.筛选模块 过滤 在jQuery对象内部的元素中找出部分匹配的元素，并封装为新的jQuery返回 下标 first() last() eq(index) filter(selector) ：当前元素 not(selector) has(selector) 对子孙元素要求 查找 查找jquery对象内部的元素的子孙/兄弟/父母元素，并封装为新的jQuery返回 children() 子 find() 后代 parent() 父 sibling 兄弟 preAll() 前面的所有兄弟 3.文档处理模块 增加 append()/appendTo():后部插入 prepend()/prependTo()：前部插入 before() 前面插入 after() 后面插入 删除 remove(): 删除 empty():掏空 自己还在 更新 replaceWith():将所有匹配的元素替换成指定的HTML或DOM元素。 4.事件模块 绑定事件 .click(function{}) .on(‘click’,function{}) mouseenter/mouseover区别： hover(function(){},function(){}) 前一个mouseenter后为leave 解绑 off(“click”) 委派 将子元素的事件委派给父辈元素处理 事件监听绑定父元素，事件发生在子元素上 事件冒泡到父元素 最终调用的事件回调函数的是子元素：even.target:发生事件的元素 好处：新增的元素没有事件监听 减少监听的数量 delegate(“li”,”click”,function(){})//回调函数中的this为子元素 undelegate(‘click’):接触事件委派 坐标 event.offsetX 原点：当前元素的左上角 event.clientX 原点：窗口左上角 event.pageX 原点：页面左上角 事件相关 停止时间冒泡 event.stopPropagation() 阻止事件的默认行为 event.preventDe fault() * * 动画效果 淡入淡出 fadeIn()/fadeOut()/fadeToggle() 展开收缩 slideDown()/slideUp()/slideToggle() 显示隐藏 show()/hide()/toggle() 自定义动画 animate({结束时的样式}) $(&quot;p&quot;).animate({//在600毫秒内切换段落的高度和透明度 height: &apos;toggle&apos;, opacity: &apos;toggle&apos; }, &quot;slow&quot;); 结束动画 stop() 插件机制 扩展jQuery函数对象的方法 this -&gt; $ jQuery.extend({ min: function(a, b) { return a &lt; b ? a : b; }, max: function(a, b) { return a &gt; b ? a : b; } }); //调用 jQuery.min(2,3); // =&gt; 2 jQuery.max(4,5); // =&gt; 5 扩展jQuery对象的方法 this -&gt; jQuery对象 jQuery.fn.extend({ check: function() { return this.each(function() { this.checked = true; }); }, uncheck: function() { return this.each(function() { this.checked = false; }); } }); //调用 $(&quot;input[type=checkbox]&quot;).check(); $(&quot;input[type=radio]&quot;).uncheck();]]></content>
      <categories>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第一篇文章]]></title>
    <url>%2F2019%2F04%2F28%2F%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%2F</url>
    <content type="text"><![CDATA[淋着淋着第一篇blog编写博客的相关步骤： 1：hexo n page tags 生成一个标签页。 修改生成的md文档，在文档头部添加type属性，为type: “tags”,则可以将编写的 博客的所属标签添加到这里。 2：hexo n page categories 生成一个分类页 修改生成的md文档，在文档头部添加type属性，为type: “tags”,则可以将编写的 博客的所属分类添加到这里。 3：hexo n md文档名 &nbsp;比如：hexo&nbsp;&nbsp;n&nbsp;&nbsp;淋着的第一篇博客 title: 第一篇文章 date: 2019-04-28 23:09:51 tags: - 导航 文档所属标签 - 分享 文档所属标签 categories: 前端&nbsp;&nbsp;文档所属分类 MakeDown语法 列表1 列表2 a 子列表 b 子列表 列表3水平虚线 链接淋着github 插入图片 斜体字体加粗字体 插入代码单行&lt;html&gt;&lt;/html&gt;多行12345678 &lt;html&gt; &lt;head&gt; &lt;title&gt;linzhe&lt;/title&gt; &lt;/head&gt; &lt;body&gt; ··· &lt;/body&gt;&lt;/html&gt; 引用]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F04%2F28%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
